name: PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  automated-review:
    name: Automated PR Review
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Fetch base branch
        env:
          BASE_REF: ${{ github.event.pull_request.base.ref }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          git fetch origin "$BASE_REF"
          git fetch origin "$HEAD_REF"
      
      - name: Get PR Info
        id: pr-info
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "base_ref=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_TITLE: ${{ github.event.pull_request.title }}
      
      - name: Analyze PR Changes
        id: analyze-changes
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          # Try git diff with SHAs first
          if git diff --name-only $BASE_SHA..$HEAD_SHA > changed_files.txt 2>/dev/null; then
            echo "✅ Git diff with SHAs successful"
          elif git diff --name-only $(git merge-base HEAD origin/${{ steps.pr-info.outputs.base_ref }})..HEAD > changed_files.txt 2>/dev/null; then
            echo "✅ Git diff with merge-base successful"
          else
            echo "⚠️ Git diff failed, will use GitHub API in next step"
            # Create empty file for now - we'll populate via API
            touch changed_files.txt
          fi
          
          # Categorize changes
          security_files=$(grep -E "(crypto|security|vault|storage)" changed_files.txt || echo "")
          go_files=$(grep "\.go$" changed_files.txt || echo "")
          doc_files=$(grep -E "\.(md|txt)$" changed_files.txt || echo "")
          workflow_files=$(grep "\.github/" changed_files.txt || echo "")
          
          echo "security_changes=${security_files}" >> $GITHUB_OUTPUT
          echo "go_changes=${go_files}" >> $GITHUB_OUTPUT  
          echo "doc_changes=${doc_files}" >> $GITHUB_OUTPUT
          echo "workflow_changes=${workflow_files}" >> $GITHUB_OUTPUT
          
          # Count changes
          total_files=$(wc -l < changed_files.txt)
          echo "total_files=${total_files}" >> $GITHUB_OUTPUT
      
      - name: Get changed files via GitHub API (fallback)
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Check if changed_files.txt is empty (git diff failed)
            const existingFiles = fs.readFileSync('changed_files.txt', 'utf8').trim();
            
            if (!existingFiles) {
              console.log('Git diff failed, using GitHub API to get changed files...');
              
              const prNumber = context.payload.pull_request?.number || context.issue.number;
              
              // Get changed files from GitHub API
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              const changedFiles = files.map(f => f.filename).join('\n');
              fs.writeFileSync('changed_files.txt', changedFiles);
              
              console.log(`Found ${files.length} changed files via GitHub API`);
              
              // Re-categorize changes
              const securityFiles = files.filter(f => 
                f.filename.includes('crypto') || 
                f.filename.includes('security') || 
                f.filename.includes('vault') || 
                f.filename.includes('storage')
              ).map(f => f.filename).join('\n');
              
              const goFiles = files.filter(f => f.filename.endsWith('.go')).map(f => f.filename).join('\n');
              const docFiles = files.filter(f => f.filename.match(/\.(md|txt)$/)).map(f => f.filename).join('\n');
              const workflowFiles = files.filter(f => f.filename.includes('.github/')).map(f => f.filename).join('\n');
              
              // Update outputs by writing to GITHUB_OUTPUT
              const outputFile = process.env.GITHUB_OUTPUT;
              
              if (outputFile) {
                fs.appendFileSync(outputFile, `security_changes=${securityFiles}\n`);
                fs.appendFileSync(outputFile, `go_changes=${goFiles}\n`);
                fs.appendFileSync(outputFile, `doc_changes=${docFiles}\n`);
                fs.appendFileSync(outputFile, `workflow_changes=${workflowFiles}\n`);
                fs.appendFileSync(outputFile, `total_files=${files.length}\n`);
              }
              
              console.log('✅ Successfully updated file analysis via GitHub API');
            } else {
              console.log('✅ Git diff worked, using existing file analysis');
            }
      
      - name: Security-Focused Review
        if: steps.analyze-changes.outputs.security_changes != ''
        run: |
          echo "🔒 Security-related changes detected!"
          echo "Files: ${{ steps.analyze-changes.outputs.security_changes }}"
          
          # Check for potential security issues
          security_issues=""
          
          # Check for hardcoded secrets
          if grep -r "password.*=.*[\"']" --include="*.go" .; then
            security_issues="${security_issues}\n- ⚠️ Potential hardcoded password found"
          fi
          
          # Check for weak crypto
          if grep -r "md5\|sha1" --include="*.go" .; then
            security_issues="${security_issues}\n- ⚠️ Weak cryptographic algorithm detected"
          fi
          
          # Check for missing error handling
          if grep -r "err.*:=.*;" --include="*.go" . | grep -v "if.*err"; then
            security_issues="${security_issues}\n- ⚠️ Potential unchecked errors found"
          fi
          
          echo "security_issues=${security_issues}" >> $GITHUB_OUTPUT
        id: security-check
      
      - name: Code Quality Check
        if: steps.analyze-changes.outputs.go_changes != ''
        run: |
          echo "📝 Go code changes detected!"
          
          quality_issues=""
          
          # Check for TODO/FIXME comments
          if grep -r "TODO\|FIXME\|XXX" --include="*.go" .; then
            quality_issues="${quality_issues}\n- 📋 TODO/FIXME comments found - consider addressing"
          fi
          
          # Check for print statements (potential debug code)
          if grep -r "fmt\.Print.*)" --include="*.go" . | grep -v "cmd/"; then
            quality_issues="${quality_issues}\n- 🐛 Debug print statements found outside CLI commands"
          fi
          
          # Check for missing comments on exported functions
          uncommented_exports=$(grep -r "^func [A-Z]" --include="*.go" . | grep -v "\.go://")
          if [ -n "$uncommented_exports" ]; then
            quality_issues="${quality_issues}\n- 📚 Exported functions without comments found"
          fi
          
          echo "quality_issues=${quality_issues}" >> $GITHUB_OUTPUT
        id: quality-check
      
      - name: PR Checklist Validation
        id: checklist-validation
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          checklist_issues=""
          
          # Check if security checklist is completed
          if [[ "${{ steps.analyze-changes.outputs.security_changes }}" != "" ]]; then
            if ! echo "$PR_BODY" | grep -q "\\[x\\].*security"; then
              checklist_issues="${checklist_issues}\n- ❌ Security checklist not completed"
            fi
          fi
          
          # Check if testing checklist is completed  
          if [[ "${{ steps.analyze-changes.outputs.go_changes }}" != "" ]]; then
            if ! echo "$PR_BODY" | grep -q "\\[x\\].*test"; then
              checklist_issues="${checklist_issues}\n- ❌ Testing checklist not completed"
            fi
          fi
          
          echo "checklist_issues=${checklist_issues}" >> $GITHUB_OUTPUT
      
      - name: Generate Review Comment
        id: generate-comment
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          comment="## 🤖 Automated PR Review\n\n"
          comment="${comment}**PR Summary:**\n"
          comment="${comment}- 📊 **Files changed:** ${{ steps.analyze-changes.outputs.total_files }}\n"
          comment="${comment}- 👤 **Author:** @${{ steps.pr-info.outputs.pr_author }}\n"
          comment="${comment}- 🌿 **Branch:** \`$HEAD_REF\` → \`${{ steps.pr-info.outputs.base_ref }}\`\n\n"
          
          # Security section
          if [[ "${{ steps.analyze-changes.outputs.security_changes }}" != "" ]]; then
            comment="${comment}### 🔒 Security Review\n"
            comment="${comment}**Security-related files changed:**\n\`\`\`\n${{ steps.analyze-changes.outputs.security_changes }}\n\`\`\`\n"
            
            if [[ "${{ steps.security-check.outputs.security_issues }}" != "" ]]; then
              comment="${comment}**⚠️ Security Issues Found:**\n${{ steps.security-check.outputs.security_issues }}\n\n"
            else
              comment="${comment}**✅ No obvious security issues detected**\n\n"
            fi
          fi
          
          # Code quality section
          if [[ "${{ steps.analyze-changes.outputs.go_changes }}" != "" ]]; then
            comment="${comment}### 📝 Code Quality Review\n"
            
            if [[ "${{ steps.quality-check.outputs.quality_issues }}" != "" ]]; then
              comment="${comment}**📋 Quality Suggestions:**\n${{ steps.quality-check.outputs.quality_issues }}\n\n"
            else
              comment="${comment}**✅ Code quality looks good**\n\n"
            fi
          fi
          
          # Checklist validation
          if [[ "${{ steps.checklist-validation.outputs.checklist_issues }}" != "" ]]; then
            comment="${comment}### ❌ Checklist Issues\n${{ steps.checklist-validation.outputs.checklist_issues }}\n\n"
          fi
          
          # Documentation changes
          if [[ "${{ steps.analyze-changes.outputs.doc_changes }}" != "" ]]; then
            comment="${comment}### 📚 Documentation Changes\n"
            comment="${comment}**Files updated:**\n\`\`\`\n${{ steps.analyze-changes.outputs.doc_changes }}\n\`\`\`\n\n"
          fi
          
          # Workflow changes
          if [[ "${{ steps.analyze-changes.outputs.workflow_changes }}" != "" ]]; then
            comment="${comment}### ⚙️ Workflow Changes\n"
            comment="${comment}**⚠️ CI/CD workflows modified - requires owner review**\n\n"
          fi
          
          # Final recommendations
          comment="${comment}### 🎯 Next Steps\n"
          if [[ "${{ steps.analyze-changes.outputs.security_changes }}" != "" ]]; then
            comment="${comment}- 👑 **Owner review required** for security changes\n"
          fi
          comment="${comment}- ✅ Ensure all CI checks pass\n"
          comment="${comment}- 📝 Update tests if needed\n"
          comment="${comment}- 📚 Update documentation if required\n\n"
          
          comment="${comment}---\n*🤖 This review was generated automatically. For questions, mention @${{ github.repository_owner }}*"
          
          # Save comment to file for posting
          echo -e "$comment" > review_comment.md
      
      - name: Post Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('review_comment.md', 'utf8');
            
            // Check if automated review comment already exists
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('🤖 Automated PR Review')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  request-copilot-review:
    name: Request GitHub Copilot Review
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    
    steps:
      - name: Request Copilot Review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get PR number correctly
            const prNumber = context.payload.pull_request?.number || context.issue.number;
            
            console.log(`Requesting Copilot review for PR #${prNumber}`);
            
            // Request GitHub Copilot review for the PR
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `@github-copilot review this PR focusing on:
                
                🔒 **Security considerations** (especially for password manager code)
                📝 **Code quality and best practices** 
                🧪 **Test coverage and edge cases**
                📚 **Documentation accuracy**
                ⚡ **Performance implications**
                
                Please provide specific suggestions for improvement.`
              });
              
              console.log('✅ Copilot review requested successfully');
            } catch (error) {
              console.log('ℹ️ Copilot review request failed:', error.message);
              console.log('This is normal if Copilot is not enabled for this repository');
            }

  security-gate:
    name: Security Gate Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'internal/crypto/') || contains(github.event.pull_request.changed_files, 'internal/storage/')
    
    steps:
      - name: Block security changes without owner approval
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request?.number || context.issue.number;
            
            // Check if PR author is the owner
            const isOwner = context.payload.pull_request.user.login === context.repo.owner;
            
            if (!isOwner) {
              // Add security review label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['security-review-required', 'needs-owner-review']
              });
              
              // Post security gate comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `## 🔒 Security Gate Activated
                
                This PR modifies security-critical code and requires owner review before merging.
                
                **Security files changed:**
                - Files in \`internal/crypto/\` or \`internal/storage/\`
                
                **Next steps:**
                1. ✅ Automated security checks will run
                2. 👑 @${context.repo.owner} will review security implications
                3. 🔍 Manual security testing may be required
                
                **⚠️ This PR cannot be merged until owner approval is received.**`
              });
            }

  automated-approval:
    name: Automated Approval for Safe Changes
    runs-on: ubuntu-latest
    needs: [automated-review]
    if: |
      github.event.action == 'opened' || 
      github.event.action == 'synchronize' ||
      github.event_name == 'pull_request_review'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Check if Auto-Approval Eligible
        id: check-eligibility
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get PR number correctly
            const prNumber = context.payload.pull_request?.number || context.issue.number;
            
            console.log(`Checking auto-approval eligibility for PR #${prNumber}`);
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            const changedFiles = files.map(f => f.filename);
            console.log('Changed files:', changedFiles);
            
            // Check if contains security-critical files
            const securityFiles = changedFiles.filter(f => 
              f.includes('internal/crypto/') || 
              f.includes('internal/storage/') ||
              f.includes('.github/workflows/') ||
              f.includes('go.mod') ||
              f.includes('package.json')
            );
            
            // Check if PR author is trusted contributor or owner  
            const trustedUsers = [
              'hungnguyen18',           // Repository owner
              // 'trusted-contributor-1', // Add trusted contributors here
              // 'trusted-contributor-2', // when you have regular contributors
            ];
            const isOwner = pr.user.login === context.repo.owner;
            const isTrusted = trustedUsers.includes(pr.user.login);
            
            // Check CI status
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            const requiredChecks = ['test', 'build', 'lint', 'security'];
            const passedChecks = checks.check_runs
              .filter(check => requiredChecks.some(req => check.name.includes(req)))
              .filter(check => check.conclusion === 'success');
            
            const allChecksPass = passedChecks.length >= requiredChecks.length;
            
            // Check for unresolved conversations
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            const hasRequestedChanges = reviews.some(review => review.state === 'CHANGES_REQUESTED');
            
            // Check PR labels
            const hasSecurityLabel = pr.labels.some(label => 
              label.name.includes('security-review-required') ||
              label.name.includes('needs-owner-review')
            );
            
            // Determine eligibility
            const eligible = 
              securityFiles.length === 0 &&          // No security files
              allChecksPass &&                       // All CI checks pass
              !hasRequestedChanges &&                // No requested changes
              !hasSecurityLabel &&                   // No security labels
              (isOwner || isTrusted);                 // Owner or trusted user
            
            console.log('Auto-approval eligibility:', {
              securityFiles: securityFiles.length,
              allChecksPass,
              hasRequestedChanges,
              hasSecurityLabel,
              isOwnerOrTrusted: isOwner || isTrusted,
              eligible
            });
            
            return {
              eligible,
              reason: eligible ? 'All conditions met for auto-approval' : 
                     securityFiles.length > 0 ? 'Contains security-critical files' :
                     !allChecksPass ? 'CI checks not all passing' :
                     hasRequestedChanges ? 'Has unresolved change requests' :
                     hasSecurityLabel ? 'Has security review labels' :
                     'Author not authorized for auto-approval'
            };
      
      - name: Auto-Approve Safe Changes
        if: fromJSON(steps.check-eligibility.outputs.result).eligible
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request?.number || context.issue.number;
            
            // Create approval review
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              event: 'APPROVE',
              body: `## 🤖 Automated Approval
              
              This PR has been automatically approved because:
              
              ✅ **All CI checks pass**
              ✅ **No security-critical files modified**
              ✅ **No unresolved change requests**  
              ✅ **Author is authorized for auto-approval**
              
              **Files changed:** Non-security code only
              **Status:** Ready to merge
              
              ---
              *This approval was generated automatically. Manual review can still override if needed.*`
            });
            
            // Add auto-approved label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: ['bot: approved', 'ready-to-merge']
            });
            
            console.log('✅ PR automatically approved');
      
      - name: Comment Why Not Auto-Approved
        if: "!fromJSON(steps.check-eligibility.outputs.result).eligible"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request?.number || context.issue.number;
            const result = ${{ steps.check-eligibility.outputs.result }};
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## 🔍 Manual Review Required
              
              This PR requires manual review because:
              
              **Reason:** ${result.reason}
              
              **Manual review needed from:**
              - 👑 Repository owner (@${context.repo.owner})
              
              **To get automated approval in the future:**
              - ✅ Ensure all CI checks pass
              - 🔒 Avoid modifying security-critical files
              - 📋 Complete all PR checklist items
              
              ---
              *Once manual review is complete, this PR can be merged.*`
            });
            
            console.log('ℹ️ Manual review required:', result.reason);