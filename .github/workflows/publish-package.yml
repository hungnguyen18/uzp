name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Configure NPM registry
        run: |
          npm config set registry https://registry.npmjs.org/
          npm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
          echo "Registry configured:"
          npm config get registry
          echo "Auth token configured for: $(npm config get //registry.npmjs.org/:_authToken | cut -c1-10)..."
      
      - name: Install dependencies
        run: npm install --ignore-scripts
      
      - name: Publish to NPM
        run: npm publish --access public --registry https://registry.npmjs.org

  publish-github-packages:
    runs-on: ubuntu-latest
    if: success() || failure()  # Run regardless of NPM job status
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@hungnguyen18'
      
      - name: Configure package for GitHub Packages
        run: |
          # Backup original package.json
          cp package.json package.json.backup
          
          # Update package name to scoped version
          jq '.name = "@hungnguyen18/uzp-cli" | .publishConfig = {"registry": "https://npm.pkg.github.com"}' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Updated package.json for GitHub Packages:"
          cat package.json | jq '.name, .publishConfig'
      
      - name: Install dependencies
        run: npm install --ignore-scripts
      
      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Restore original package.json
        if: always()
        run: |
          if [ -f package.json.backup ]; then
            mv package.json.backup package.json
          fi 