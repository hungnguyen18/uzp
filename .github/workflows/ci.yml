name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  test:
    name: Test Go Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      
      - name: Download dependencies
        run: go mod download
      
      - name: Verify dependencies
        run: go mod verify
      
      - name: Run go vet
        run: go vet ./...
      
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          go build -ldflags="-s -w" -o dist/uzp-${{ matrix.goos }}-${{ matrix.goarch }} .
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: uzp-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m --out-format=colored-line-number

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Run Go Security Checks
        run: |
          echo "üîç Running security checks..."
          
          # Check for hardcoded secrets (excluding test files and comments)
          echo "üìã Checking for hardcoded secrets..."
          if grep -r "password\s*=\s*[\"']" --include="*.go" --exclude-dir="*test*" . || \
             grep -r "secret\s*=\s*[\"']" --include="*.go" --exclude-dir="*test*" . || \
             grep -r "token\s*=\s*[\"']" --include="*.go" --exclude-dir="*test*" . || \
             grep -r "api[_-]key\s*=\s*[\"']" --include="*.go" --exclude-dir="*test*" .; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets found!"
            exit 1
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi
          
          # Check for potential nil pointer dereferences and unsafe operations
          echo "üìã Checking for unsafe operations..."
          if grep -r "//.*TODO.*security\|//.*FIXME.*security\|//.*XXX.*security" --include="*.go" .; then
            echo "‚ö†Ô∏è  Found security-related TODO/FIXME comments that need attention"
            exit 1
          else
            echo "‚úÖ No security TODOs found"
          fi
          
          # Check for unsafe crypto practices
          echo "üìã Checking for unsafe crypto practices..."
          if grep -r "md5\|sha1\|crypto/des\|crypto/rc4" --include="*.go" .; then
            echo "‚ö†Ô∏è  Found usage of deprecated crypto algorithms"
            exit 1
          else
            echo "‚úÖ No deprecated crypto algorithms found"
          fi
      
      - name: Run Govulncheck
        run: |
          echo "üîç Installing and running govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  node-package:
    name: Test Node.js Package
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --ignore-scripts
      
      - name: Run package validation
        run: |
          npm run validate || echo "No validate script found"
          node -e "console.log('Package.json is valid')"
      
      - name: Test installation scripts
        run: |
          node scripts/install.js --dry-run || echo "Install script test completed" 