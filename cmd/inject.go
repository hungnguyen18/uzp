package cmd

import (
	"fmt"
	"sort"
	"syscall"

	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var projectName string

var injectCmd = &cobra.Command{
	Use:   "inject",
	Short: "Export project secrets as .env format",
	Long:  `Export all secrets for a specific project in .env file format.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		// Check if vault is unlocked, auto-unlock if needed
		if !vault.IsUnlocked() {
			fmt.Print("Vault is locked. Enter master password: ")
			password, err := term.ReadPassword(int(syscall.Stdin))
			if err != nil {
				return fmt.Errorf("failed to read password: %w", err)
			}
			fmt.Println() // New line after password

			if err := vault.Unlock(string(password)); err != nil {
				return fmt.Errorf("failed to unlock vault: %w", err)
			}

			// Clear password from memory
			for i := range password {
				password[i] = 0
			}
		}

		// Check if project name is provided
		if projectName == "" {
			return fmt.Errorf("project name is required. Use --project flag")
		}

		// Get project secrets
		secrets, err := vault.GetProjectSecrets(projectName)
		if err != nil {
			return err
		}

		// Sort keys for consistent output
		keys := make([]string, 0, len(secrets))
		for key := range secrets {
			keys = append(keys, key)
		}
		sort.Strings(keys)

		// Output in .env format
		fmt.Printf("# Environment variables for project: %s\n", projectName)
		fmt.Printf("# Generated by uzp\n\n")

		for _, key := range keys {
			// Convert key to uppercase and replace non-alphanumeric chars with underscore
			envKey := convertToEnvKey(key)
			fmt.Printf("%s=%s\n", envKey, secrets[key])
		}

		return nil
	},
}

func init() {
	injectCmd.Flags().StringVarP(&projectName, "project", "p", "", "Project name to export secrets from")
}

// convertToEnvKey converts a key to environment variable format
func convertToEnvKey(key string) string {
	result := make([]byte, 0, len(key))

	for i := 0; i < len(key); i++ {
		c := key[i]
		if (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') {
			// Convert to uppercase if lowercase
			if c >= 'a' && c <= 'z' {
				c = c - 32
			}
			result = append(result, c)
		} else {
			// Replace non-alphanumeric with underscore
			result = append(result, '_')
		}
	}

	return string(result)
}
